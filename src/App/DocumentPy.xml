<?xml version="1.0" encoding="UTF-8"?>
<GenerateModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="generateMetaModel_Module.xsd">
  <PythonExport 
    Father="PropertyContainerPy" 
    Name="DocumentPy" 
    Twin="Document" 
    TwinPointer="Document" 
    Include="App/Document.h" 
    Namespace="App" 
    FatherInclude="App/PropertyContainerPy.h" 
    FatherNamespace="App">
    <Documentation>
      <Author Licence="LGPL" Name="Juergen Riegel" EMail="FreeCAD@juergen-riegel.net" />
      <UserDocu>This is a Document class.</UserDocu>
    </Documentation>
    <Methode Name="save">
      <Documentation>
        <UserDocu>save()
                  Save the document to file :attr:`FileName`.
                  
                  :rtype: None
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="restore">
      <Documentation>
        <UserDocu>restore()
                  Restore the document from file :attr:`FileName`.
                  
                  :rtype: None
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="exportGraphviz">
      <Documentation>
        <UserDocu>exportGraphviz(file=None)
                  Export the dependencies of the objects as Graphviz graph.
                  
                  :param file: Name of file to write Dot string to.
                  :type file: string
                  
                  :rtype: string if file is None, else None 
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="openTransaction">
      <Documentation>
        <UserDocu>openTransaction( transaction ) 
                  Open a new Undo/Redo transaction.
                  
                  :param transaction: Transaction to be performed.
                  :type transaction: string
                  
                  :rtype: None
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="abortTransaction">
      <Documentation>
        <UserDocu>abortTransaction()
                  Abort an Undo/Redo transaction (rollback).</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="commitTransaction">
      <Documentation>
        <UserDocu>commitTransaction()
                  Commit an Undo/Redo transaction.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="addObject">
      <Documentation>
        <UserDocu>addObject( sort, name )
                  Add an object with given type and name to the document.
                  
                  :param sort: Type of object.
                  :type sort: string
                  :param name: Name of the object
                  :type name: string
                  
                  :rtype: :class:`FreeCAD.DocumentObject`
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="removeObject">
      <Documentation>
        <UserDocu>removeObject( name )
                  Remove an object from the document.
                  
                  :param name: Name of the object to be deleted.
                  :type name: string
                  
                  :rtype: None
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="copyObject">
      <Documentation>
        <UserDocu>copyObject( obj )
                  Copy an object from this or another document to this document.
                  
                  :param obj: Object to be copied.
                  :type obj: :class:`FreeCAD.DocumentObject`
                  
                  :rtype: :class`FreeCAD.DocumentObject`
                  
                  The object that is copied is returned as well.
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="moveObject">
      <Documentation>
        <UserDocu>moveObject( obj )
                  Move an object from another document to this document.
                  
                  :param obj: Object to be moved.
                  :type obj: :class`FreeCAD.DocumentObject`
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="undo">
      <Documentation>
        <UserDocu>undo()
                  Undo one transaction.
                  
                  :rtype: None
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="redo">
      <Documentation>
        <UserDocu>redo()
                  Redo a previosuly undid transaction.
                  
                  :rtype: None
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="clearUndos">
      <Documentation>
        <UserDocu>clearUndos()
                  Clear the undo stack of the document.
                  
                  :rtype: None
                  </UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="recompute">
      <Documentation>
        <UserDocu>recompute()
                  Recompute the document.
                  
                  :rtype: None
                  </UserDocu>
      </Documentation>
    </Methode>
	<Methode Name="getObject">
		<Documentation>
			<UserDocu>getObject( name )
                      Return the object with the given name.
                      
                      :param name: Name of the object.
                      :type name: string
                      
                      :rtype: :class:`FreeCAD.DocumentObject`
                      </UserDocu>
		</Documentation>
	</Methode>
	<Methode Name="getObjectsByLabel">
		<Documentation>getObjectsByLabel( label)
			<UserDocu>Return the objects with the given label name.
                      
                      :param label: :attr:`label` of object.
                      :type label: string
                      
                      :rtype: :class:`FreeCAD.DocumentObject` or list
                
                      .. note:: It's possible that several objects have the same label name. Only one occurence will be returned.
                      </UserDocu>
		</Documentation>
	</Methode>
	<Methode Name="findObjects">
		<Documentation>
			<UserDocu>findObjects( type=None, name=None )
                      Find objects that match the specified type and name. Both parameters are optional.

                      :param type: type of object.
                      :type type: string
                      :param name: name of object.
                      :type: name: string
                      
                      :rtype: list
                      </UserDocu>
		</Documentation>
	</Methode>
	  <Methode Name="supportedTypes">
		  <Documentation>
			  <UserDocu>supportedTypes()
                        A list of supported types of objects.
                        
                        :rtype: list
                        </UserDocu>
		  </Documentation>
	  </Methode>
	  <Methode Name="getTempFileName">
		  <Documentation>
			  <UserDocu>getTempFileName( name )
                        Returns a temporary file name with path in the temp directory of the document.
                        
                        :param name: Name of the file.
                        :type name: string
                        
                        :rtype: string
                        </UserDocu>
		  </Documentation>
	  </Methode>
	  <Attribute Name="DependencyGraph" ReadOnly="true">
		<Documentation>
			<UserDocu>DependencyGraph
                      The dependency graph as GraphViz text.
                      
                      :rtype: string
                      </UserDocu>
		</Documentation>
		<Parameter Name="DependencyGraph" Type="String" />
	</Attribute>
	  <Attribute Name="ActiveObject" ReadOnly="true">
		  <Documentation>
			  <UserDocu>ActiveObject
                        The active object of the document.
                        
                        :rtype: :class:`FreeCAD.DocumentObject`
                        </UserDocu>
		  </Documentation>
		  <Parameter Name="ActiveObject" Type="Object" />
	  </Attribute>
	  <Attribute Name="Objects" ReadOnly="true">
      <Documentation>
        <UserDocu>Objects
                  The list of objects handled by this document.
                  
                  :rtype: list
                  </UserDocu>
      </Documentation>
      <Parameter Name="Objects" Type="List" />
    </Attribute>
    <Attribute Name="UndoMode" ReadOnly="false">
      <Documentation>
        <UserDocu>UndoMode
                  The Undo mode of the Document (0 = no Undo, 1 = Undo/Redo).
                  
                  :rtype: integer
                  </UserDocu>
      </Documentation>
      <Parameter Name="UndoMode" Type="Int" />
    </Attribute>
    <Attribute Name="UndoRedoMemSize" ReadOnly="true">
      <Documentation>
        <UserDocu>The size of the Undo stack in byte</UserDocu>
      </Documentation>
      <Parameter Name="UndoRedoMemSize" Type="Int" />
    </Attribute>
    <Attribute Name="UndoCount" ReadOnly="true">
      <Documentation>
        <UserDocu>Number of possible Undos</UserDocu>
      </Documentation>
      <Parameter Name="UndoCount" Type="Int" />
    </Attribute>
    <Attribute Name="RedoCount" ReadOnly="true">
      <Documentation>
        <UserDocu>Number of possible Redos</UserDocu>
      </Documentation>
      <Parameter Name="RedoCount" Type="Int"/>
    </Attribute>
    <Attribute Name="UndoNames" ReadOnly="true">
      <Documentation>
        <UserDocu>A list of Undo names</UserDocu>
      </Documentation>
      <Parameter Name="UndoNames" Type="List"/>
    </Attribute>
    <Attribute Name="RedoNames" ReadOnly="true">
      <Documentation>
        <UserDocu>A List of Redo names</UserDocu>
      </Documentation>
      <Parameter Name="RedoNames" Type="List"/>
    </Attribute>
    <Attribute Name="Name" ReadOnly="true">
      <Documentation>
        <UserDocu>The internal name of the document</UserDocu>
      </Documentation>
      <Parameter Name="Name" Type="String"/>
    </Attribute>
    <CustomAttributes />
  </PythonExport>
</GenerateModel>
